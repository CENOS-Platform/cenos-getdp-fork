$Id: TODO.txt,v 1.1 2008-07-10 10:21:48 geuzaine Exp $

Lars.Rindorf@teknologisk.dk wrote:
>> By the way, with sparsekit and 3D modelling in getdp I found an  
>> error. If one includes terms like
>>       Galerkin {      [ Einc[], {E} ]; In port; Integration I1;  
>> Jacobian Jac;}
>> Where Einc is purely imaginary then sparsekit complex conjugates it. 
>>  It is only a problem in 3D. In 2D it does not exist. The problem  
>> also disappers with petsc.
>>

*******************************************************************

access Time & TimeImag (mostly for eigenvalues Re/Im) in
post-processing !

*******************************************************************

make uninstall

*******************************************************************

PETSc solvers: matrix assembly is extremely slow if not preallocated
correctly. Need to preallocate global equations separately from local
ones. Idea: allocate full rows for global equations.

*******************************************************************

verify if the post-pro uses the correct frequency for each system if
the frequency was changed by hand using SetFrequency in the
resolution, in between two GenerateSystem

*******************************************************************

If we use petsc+complex+mpi, the CC is not set to the c++ compiler
(it is when using petsc+compex)

*******************************************************************

Move the optional code (Arpack, Sparksit?, NR) into new contrib/
directory

********************************************************************

Arguments in nested expressions don't work. A workaround is to store
the arguments in registers (i.e. with '#1'-like commands).

********************************************************************

Global quantities have to be defined on "single" regions, i.e. regions
of type aa = Region[num].

********************************************************************

Should recompute Current.x,y,z in Cal_vBFxDof??

********************************************************************

Andre Nicolet <andre.nicolet@fresnel.fr>

* generalize localterm (equation part should call Cal_vBFxDof)

* add field in Data_Function for vector-valued basis functions:
generalized gradient

* define x, y and z derivatives of vector-valued basis functions

* define a 'generalized gradient' basis function based on these
partial derivatives (warning: change of ccords!)

* generalize Cal_Galerkin, Get_FunctionValue, etc. so that they accept
the tensor values retuned by the generalized gradient
