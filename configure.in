dnl GetDP - Copyright (C) 1997-2008 P. Dular, C. Geuzaine
dnl
dnl See the LICENSE.txt file for license information. Please report all
dnl bugs and problems to <getdp@geuz.org>.

dnl Process this file with autoconf to produce the configure script.

dnl Check that this is the getdp source tree
AC_INIT(Interface/ProParser.y)

dnl Parse '--with' command-line options
AC_ARG_WITH(gsl-prefix,
            AC_HELP_STRING([--with-gsl-prefix=PFX],
                           [prefix where GSL is installed]),
            [GSL_PREFIX=$withval])
AC_ARG_WITH(blas-lapack-prefix,
            AC_HELP_STRING([--with-blas-lapack-prefix=PFX],
                           [prefix where BLAS and LAPACK are installed]),
            [BLAS_LAPACK_PREFIX=$withval])
AC_ARG_WITH(petsc-prefix,
            AC_HELP_STRING([--with-petsc-prefix=PFX],
                           [prefix where PETSc is installed]),
            [PETSC_DIR=$withval])
AC_ARG_WITH(petsc-arch,
            AC_HELP_STRING([--with-petsc-arch=ARCH],
                           [PETSc architecture]),
            [PETSC_ARCH=$withval])

dnl Parse '--enable' command line options
AC_ARG_ENABLE(petsc,
              AC_HELP_STRING([--enable-petsc],
                             [use PETSc linear solvers (default=yes)]))
AC_ARG_ENABLE(sparskit,
              AC_HELP_STRING([--enable-sparskit],
                             [use Sperskit linear solvers (default=no)]))
AC_ARG_ENABLE(cygwin,
              AC_HELP_STRING([--enable-cygwin],
                             [use the Cygwin library on Windows (default=no)]))
AC_ARG_ENABLE(gsl,
              AC_HELP_STRING([--enable-gsl],
                             [use GSL as numerical toolkit (default=yes)]))
AC_ARG_ENABLE(arpack,
              AC_HELP_STRING([--enable-arpack],
                             [enable built-in Arpack eigensolver (default=yes)]))
AC_ARG_ENABLE(zitsol,
              AC_HELP_STRING([--enable-zitsol],
                             [enable support for ZITSOL (default=no)]))
AC_ARG_ENABLE(fortran,
              AC_HELP_STRING([--enable-fortran],
                             [enable Fortran subroutines (default=yes)]))

dnl Get the operating system and machine names
UNAME=`uname`
HOSTNAME=`hostname`

dnl Set default option flags
FLAGS="-DHAVE_LEGACY"

dnl Check for default compilers
AC_PROG_CXX
if test "x$enable_fortran" != "xno"; then
  AC_PROG_F77
else
  F77=disabled
  FLAGS="${FLAGS} -DHAVE_NO_FORTRAN"
fi
if test "x${CXX}" = "x" -o "x${F77}" = "x" ; then
  AC_MSG_ERROR([Could not find required compilers, aborting.])
fi

dnl Set preprocessor and linker
AC_PROG_CPP
LINKER="${CXX}"

dnl Set default optimization level
OPTIM="${CXXFLAGS}"

dnl Use c++ for all compilation tests
AC_LANG(C++)

dnl Take care of no-cygwin option before doing any other tests
case "$UNAME" in
  CYGWIN*)
    if test "x$enable_cygwin" != "xyes"; then
      UNAME="${UNAME}-no-cygwin"
      CXX="${CXX} -mno-cygwin"
      if test "x$enable_fortran" != "xno"; then
        F77="${F77} -mno-cygwin"
      fi
      LINKER="${LINKER} -mno-cygwin"
    fi
    ;;
esac

dnl Check for various programs
AC_PROG_CPP
AC_PROG_RANLIB

dnl How to build static libraries?
case "$UNAME" in
  Darwin*)
    RANLIB=true
    AR="libtool -o"
    ;;
  *)
    AC_PROG_RANLIB
    AC_PATH_PROG(AR, ar)
    if test "x${AR}" = "x:"; then
      AC_MSG_ERROR([Could not find the library archiver, aborting.])
    fi
    AR="${AR} ruvs"
    ;;
esac

dnl See if we need a .exe extension on executables
AC_EXEEXT

dnl Check for standard math library
AC_CHECK_LIB(m,main)

dnl Check if Unix98 socklen_t type is available
AC_TRY_COMPILE(
  [#include <sys/types.h>
   #include <sys/socket.h>],
  [socklen_t len = 42; return 0;],,FLAGS="-DHAVE_NO_SOCKLEN_T ${FLAGS}")

dnl Set default subdirectories
GETDP_DIRS="Common Numeric Interface Legacy Main"
GETDP_LIBS="-Llib -lGetDPLegacy -lGetDPInterface -lGetDPLegacy -lGetDPNumeric -lGetDPCommon"

dnl Check for PETSc
if test "x$enable_petsc" != "xno" -a "x$enable_sparskit" != "xyes"; then
  if test "x${PETSC_DIR}" = "x"; then
    AC_MSG_ERROR([Could not determine PETSC_DIR. Run configure again with --with-petsc-prefix.])
  fi
  if test "x${PETSC_ARCH}" = "x"; then
    AC_MSG_ERROR([Could not determine PETSC_ARCH. Run configure again with --with-petsc-arch.])
  fi
  AC_CHECK_FILE(${PETSC_DIR}/bmake/${PETSC_ARCH}/petscconf.h,PETSC="yes",PETSC="no")
  if test "x${PETSC}" = "xyes"; then
    PETSC_INCLUDE_MAKEFILE='include ${PETSC_DIR}/bmake/common/variables'
  else
    AC_CHECK_FILE(${PETSC_DIR}/${PETSC_ARCH}/include/petscconf.h,PETSC="yes",PETSC="no")
    if test "x${PETSC}" = "xyes"; then
      PETSC_INCLUDE_MAKEFILE='include ${PETSC_DIR}/conf/variables'
    else
      AC_MSG_ERROR([Could not find PETSC. Use --enable-sparskit instead?])
    fi
  fi
  LAPACK="yes"
  LINKER="\${CLINKER}"
  FLAGS="${FLAGS} -DHAVE_PETSC \${PETSCFLAGS} \${PETSC_INCLUDE}"
fi

dnl Check for Sparskit
if test "x$enable_sparskit" = "xyes"; then
  AC_CHECK_FILE(./contrib/Sparskit/Sparskit.cpp,SPARSKIT="yes",SPARSKIT="no")
  if test "x${SPARSKIT}" = "xno"; then
    AC_MSG_ERROR([Could not find Sparskit.])
  fi
  GETDP_DIRS="${GETDP_DIRS} contrib/Sparskit"
  GETDP_LIBS="${GETDP_LIBS} -lGetDPSparskit"
  FLAGS="${FLAGS} -DHAVE_SPARSKIT -DHAVE_ILU_FLOAT"
fi

dnl Check for blas and lapack by hand if we don't have PETSc
if test "x${PETSC}" != "xyes"; then
  if test "x$enable_fortran" != "xno"; then
    AC_LANG_PUSH(Fortran 77)
  fi
  if test "x${BLAS_LAPACK_PREFIX}" != "x"; then
    LDFLAGS="${LDFLAGS} -L${BLAS_LAPACK_PREFIX} -L${BLAS_LAPACK_PREFIX}/lib"
  fi
  AC_CHECK_LIB(blas,dasum,BLAS="yes",BLAS="no")
  if test "x${BLAS}" = "xyes"; then
    AC_CHECK_LIB(lapack,dbdsqr,LAPACK="yes",LAPACK="no",-lblas)
  fi
  if test "x$enable_fortran" != "xno"; then
    AC_LANG_POP()
  fi
fi

dnl Check for Arpack, then link with blas and lapack if necessary
if test "x$enable_fortran" != "xno"; then
  if test "x$enable_arpack" != "xno" -a "x${LAPACK}" = "xyes"; then
    AC_CHECK_FILE(./contrib/Arpack/znaupd.f, ARPACK="yes", ARPACK="no")
    if test "x${ARPACK}" = "xyes"; then
      FLAGS="${FLAGS} -DHAVE_ARPACK"
      GETDP_DIRS="${GETDP_DIRS} contrib/Arpack"
      GETDP_LIBS="${GETDP_LIBS} -lGetDPArpack"
      if test "x${SPARSKIT}" = "xyes"; then
        if test "x${BLAS_LAPACK_PREFIX}" != "x"; then
          GETDP_LIBS="${GETDP_LIBS} -L${BLAS_LAPACK_PREFIX} -llapack -lblas"
        else
          GETDP_LIBS="${GETDP_LIBS} -llapack -lblas"
        fi
      fi
    fi
  fi
fi

dnl check for zitsol
if test "x$enable_fortran" != "xno"; then
  if test "x$enable_zitsol" = "xyes" -a "x${PETSC}" = "xyes"; then
    AC_CHECK_FILE(./contrib/ZITSOL_1/zarms2.c,ZITSOL="yes",ZITSOL="no")
    if test "x${ZITSOL}" = "xyes"; then
      FLAGS="${FLAGS} -DHAVE_ZITSOL"
      GETDP_DIRS="${GETDP_DIRS} contrib/ZITSOL_1"
      GETDP_LIBS="${GETDP_LIBS} -lGetDPzitsol"
    fi
  fi
fi

dnl Check for Gmsh 
if test "x${GMSH_PREFIX}" != "x"; then
  LDFLAGS="-L${GMSH_PREFIX} -L${GMSH_PREFIX}/lib ${LDFLAGS}"
fi
AC_CHECK_LIB(Gmsh,main,GMSH="yes",GMSH="no")
if test "x${GMSH}" = "xyes"; then
  if test "x${GMSH_PREFIX}" = "x"; then
    GETDP_LIBS="${GETDP_LIBS} -lGmsh"
  else
    GETDP_LIBS="${GETDP_LIBS} -L${GMSH_PREFIX} -L${GMSH_PREFIX}/lib -lGmsh"
    FLAGS="${FLAGS} -I${GMSH_PREFIX} -I${GMSH_PREFIX}/include"
  fi
else
  AC_CHECK_FILE(./contrib/gmsh/GmshEmbedded.cpp,GMSH="yes",GMSH="no")
  if test "x${GMSH}" = "xyes"; then
    GETDP_DIRS="${GETDP_DIRS} contrib/gmsh"
    GETDP_LIBS="${GETDP_LIBS} -lGmshEmbedded"
  fi
fi

dnl Check for GSL 
if test "x$enable_gsl" != "xno"; then
  if test "x${GSL_PREFIX}" != "x"; then
    LDFLAGS="-L${GSL_PREFIX} -L${GSL_PREFIX}/lib ${LDFLAGS}"
  fi
  AC_CHECK_LIB(gslcblas,main)
  AC_CHECK_LIB(gsl,main,GSL="yes",GSL="no")
  if test "x${GSL}" = "xyes"; then
    FLAGS="${FLAGS} -DHAVE_GSL"
    if test "x${GSL_PREFIX}" = "x"; then
      GETDP_LIBS="${GETDP_LIBS} -lgsl -lgslcblas"
    else
      GETDP_LIBS="${GETDP_LIBS} -L${GSL_PREFIX} -L${GSL_PREFIX}/lib -lgsl -lgslcblas"
      FLAGS="${FLAGS} -I${GSL_PREFIX} -I${GSL_PREFIX}/include"
    fi
  fi
fi
if test "x${GSL}" != "xyes"; then
  dnl Check if non-free numerical recipes routines are in the tree
  AC_CHECK_FILE(./contrib/NR/dsvdcmp.cpp,NR="yes",NR="no")
  if test "x${NR}" = "xyes"; then
    echo "********************************************************************"
    echo "  You are building a non-free version of GetDP, using code copyright"
    echo "  (C) 1986-92 Numerical Recipes Software J!0."
    echo "  To use the GSL instead, run configure again with the --enable-gsl"
    echo "  option."
    echo "********************************************************************"
    GETDP_DIRS="${GETDP_DIRS} contrib/NR"
    GETDP_LIBS="${GETDP_LIBS} -lGetDPNR"
  else
    AC_MSG_ERROR([Could not find GSL or NR, aborting.])
  fi
fi

dnl Add PETSc libraries at the end (they include blas and lapack)
if test "x${PETSC}" = "xyes"; then
  GETDP_LIBS="${GETDP_LIBS} \${PETSC_KSP_LIB}"
fi

dnl Add necessary Fortran libraries
case "${F77}" in
  *gfortran*)
    GETDP_LIBS="${GETDP_LIBS} -lgfortran"
    ;;
  *g77*)
    GETDP_LIBS="${GETDP_LIBS} -lg2c"
    ;;
esac

dnl Force specific options for native compilers
case "${UNAME}" in
  CYGWIN* | MINGW*)
    if test "x$enable_cygwin" != "xyes"; then
      GETDP_LIBS="${GETDP_LIBS} -lwsock32"
    fi
    ;;
  Darwin*)
    case "${F77}" in
      *gfortran*)
        if test "x${ARPACK}" = "xyes"; then
          AC_MSG_WARN([gfortran breaks Arpack on Mac OS X (known probl. in blas zdotc)])
        fi
        ;;
    esac
    ;;
esac

dnl Finish link line
GETDP_LIBS="${GETDP_LIBS} -lm"    

case "$UNAME" in
  CYGWIN*)
    dnl increase stack size to 16Mb to avoid stack overflows in
    dnl recursive calls (cf. Cal_Quantity)
    LINKER="${LINKER} -Wl,--stack,16777216"
    ;;
esac

dnl Write output
AC_SUBST(UNAME)
AC_SUBST(HOSTNAME)
AC_SUBST(FLAGS)
AC_SUBST(OPTIM)
AC_SUBST(LINKER)
AC_SUBST(GETDP_DIRS)
AC_SUBST(GETDP_LIBS)
AC_SUBST(AR)
AC_SUBST(PETSC_INCLUDE_MAKEFILE)
AC_SUBST(PETSC_DIR)
AC_SUBST(PETSC_ARCH)
AC_OUTPUT(variables)

dnl Print some information
echo "********************************************************************"
echo "GetDP is configured for"
echo "  - OS               : $UNAME on $HOSTNAME"
echo "  - C++ compiler     : $CXX"
echo "  - Fortran compiler : $F77"
echo "  - Linker           : $LINKER"
echo "  - Optimization     : $OPTIM"
echo "  - Options          : $FLAGS"
if test "x${PETSC}" = "xyes"; then
  echo "  - PETSC_DIR        : $PETSC_DIR"
  echo "  - PETSC_ARCH       : $PETSC_ARCH"
fi
echo "********************************************************************"
echo "To fine-tune the configuration, edit the 'variables' file"
echo "********************************************************************"
